<#
    .SYNOPSIS
        CVE Detection - CVE-2023-35628
    .DESCRIPTION
        This script checks whether the Microsoft Outlook or Microsoft Outlook for Windows apps are installed and then checks whether the December 2023 cumulative update has been installed patching for CVE-2023-35628.
    .NOTES
        2023-12-14: Initial version
    .LINK
        Blog post: https://homotechsual.dev/2023/03/15/CVE-Monitoring-NinjaOne/
#>

#region ----- DECLARATIONS ----
$script:diag = $null
$script:bitarch = $null
$script:blnWARN = $false
$script:blnBREAK = $false
$logPath = "C:\IT\Log\CVE_Vulnerability"
$strLineSeparator = "----------------------------------"
#endregion ----- DECLARATIONS ----
#region ------ Functions
function write-DRMMDiag ($messages) {
    write-output "<-Start Diagnostic->"
    foreach ($message in $messages) {$message}
    write-output "<-End Diagnostic->"
} ## write-DRMMDiag
  
function write-DRMMAlert ($message) {
    write-output "<-Start Result->"
    write-output "Alert=$($message)"
    write-output "<-End Result->"
} ## write-DRMMAlert

function StopClock {
    #Stop script execution time calculation
    logERR 3 "StopClock" "$($script:finish) - Completed Execution"
    $script:sw.Stop()
    $Days = $sw.Elapsed.Days
    $Hours = $sw.Elapsed.Hours
    $Minutes = $sw.Elapsed.Minutes
    $Seconds = $sw.Elapsed.Seconds
    $Milliseconds = $sw.Elapsed.Milliseconds
    $script:ScriptStopTime = (Get-Date).ToString("yyyy-MM-dd hh:mm:ss")
    write-output "`r`nTotal Execution Time - $($Minutes) Minutes : $($Seconds) Seconds : $($Milliseconds) Milliseconds"
    $script:diag += "`r`nTotal Execution Time - $($Minutes) Minutes : $($Seconds) Seconds : $($Milliseconds) Milliseconds`r`n"
}

function dir-Check () {
    #CHECK "PERSISTENT" FOLDERS
    if (-not (test-path -path "C:\temp")) {
        new-item -path "C:\temp" -itemtype directory -force
    }
    if (-not (test-path -path "C:\IT")) {
        new-item -path "C:\IT" -itemtype directory -force
    }
    if (-not (test-path -path "C:\IT\Log")) {
        new-item -path "C:\IT\Log" -itemtype directory -force
    }
    if (-not (test-path -path "C:\IT\Scripts")) {
        new-item -path "C:\IT\Scripts" -itemtype directory -force
    }
}

Function logERR ($intSTG, $strModule, $strErr) {
    #CUSTOM ERROR CODES
    switch ($intSTG) {
        1 {                                                         #"ERRRET"=1 - NOT ENOUGH ARGUMENTS, END SCRIPT
            $script:blnBREAK = $true
            $script:diag += "`r`n$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - NO ARGUMENTS PASSED, END SCRIPT`r`n`r`n"
            write-output "$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - NO ARGUMENTS PASSED, END SCRIPT`r`n"
        }
        2 {                                                         #"ERRRET"=2 - END SCRIPT
            $script:blnBREAK = $true
            $script:diag += "`r`n$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - ($($strModule)) :"
            $script:diag += "`r`n$($strLineSeparator)`r`n`t$($strErr), END SCRIPT`r`n`r`n"
            write-output "$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - ($($strModule)) :"
            write-output "$($strLineSeparator)`r`n`t$($strErr), END SCRIPT`r`n`r`n"
        }
        3 {                                                         #"ERRRET"=3
            #$script:blnWARN = $false
            $script:diag += "`r`n$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - $($strModule) :"
            $script:diag += "`r`n$($strLineSeparator)`r`n`t$($strErr)"
            write-output "$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - $($strModule) :"
            write-output "$($strLineSeparator)`r`n`t$($strErr)"
        }
        default {                                                   #"ERRRET"=4+
            $script:blnWARN = $true
            $script:blnBREAK = $false
            $script:diag += "`r`n$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - $($strModule) :"
            $script:diag += "`r`n$($strLineSeparator)`r`n`t$($strErr)"
            write-output "$($strLineSeparator)`r`n$($(get-date)) - CVE_Vulnerability - $($strModule) :"
            write-output "$($strLineSeparator)`r`n`t$($strErr)"
        }
    }
}

#endregion ----- Functions
#[CmdletBinding()]
#param ()
# Prepare variables and data sources.
$ScrptStartTime = (Get-Date).ToString('dd-MM-yyyy hh:mm:ss')
$script:sw = [Diagnostics.Stopwatch]::StartNew()
$MinimumOSBuilds = [System.Collections.Generic.List[version]]@(
    "6.3.9600.21715",
    "6.2.9200.24614",
    "6.1.7601.26864",
    "10.0.25398.584",
    "10.0.22631.2861",
    "10.0.22621.2861",
    "10.0.22000.2652",
    "10.0.20348.2159",
    "10.0.20348.2144",
    "10.0.19045.3803",
    "10.0.19041.3803",
    "10.0.17763.5206",
    "10.0.14393.6529",
    "10.0.10240.20345"
)
# Logic loops
$OutlookClassesPresent = (Get-ItemProperty HKLM:\SOFTWARE\Classes\Outlook.Application -ErrorAction SilentlyContinue)
$OutlookDesktopInstalled = (Get-Item -Path (Join-Path -Path $ENV:SystemDrive -ChildPath "Program Files*\Microsoft Office\root\Office*\OUTLOOK.EXE") -ErrorAction SilentlyContinue)
$OutlookNewInstalled = (Get-AppxPackage -AllUsers -Name "Microsoft.OutlookForWindows" -ErrorAction SilentlyContinue)
if ((-not $OutlookClassesPresent) -and (-not $OutlookDesktopInstalled) -and (-not $OutlookNewInstalled)) {
    Write-Output "Outlook is probably not installed."
    $script:diag += "Outlook is probably not installed.`r`n"
    #Ninja-Property-Set CVE202335628 0
} else {
    Write-Warning "Outlook is probably installed. Checking for CVE-2023-35628 patch."
    $script:diag += "Outlook is probably installed. Checking for CVE-2023-35628 patch.`r`n"
}
$OSVersion = [System.Environment]::OSVersion.Version
$OSMajorMinorBuild = [Version]("{0}.{1}.{2}" -f $OSVersion.Major, $OSVersion.Minor, $OSVersion.Build)
$MinimumApplicableOSBuilds = $MinimumOSBuilds | Where-Object { $_ -ge $OSMajorMinorBuild }
$BuildsToTest = $MinimumApplicableOSBuilds | Where-Object { $_.Build -eq $OSMajorMinorBuild.Build }
foreach ($Build in $BuildsToTest) {
    if ($Build -lt $OSVersion) {
        Write-Warning ("Minimum OS build requirement not met. Minimum OS build: {0}" -f $Build)
        $script:diag += ("Minimum OS build requirement not met. Minimum OS build: {0} `r`n" -f $Build)
        $Vulnerable = $true
    } else {
        Write-Output ("Minimum OS build requirement met. Minimum OS build: {0}" -f $Build)
        $script:diag += ("Minimum OS build requirement met. Minimum OS build: {0} `r`n" -f $Build)
        $Vulnerable = $false
    }
}
StopClock
if ($true -eq $Vulnerable) {
    Write-Warning "Vulnerable to CVE-2023-35628"
    $script:diag += "Vulnerable to CVE-2023-35628 `r`n"
    write-DRMMAlert "CVE-2023-35628 : Warning : Diagnostics - $($logPath) : $($script:ScriptStopTime)"
    write-DRMMDiag $script:diag
} elseif ($false -eq $Vulnerable) {
    Write-Output "Not vulnerable to CVE-2023-35628"
    $script:diag += "Not vulnerable to CVE-2023-35628 `r`n"
    write-DRMMAlert "CVE-2023-35628 : Safe : Diagnostics - $($logPath) : $($script:ScriptStopTime)"
    write-DRMMDiag $script:diag
    #Ninja-Property-Set CVE202335628 0
} else {
    Write-Warning "Could not determine vulnerability status."
    $script:diag += "Could not determine vulnerability status.`r`n"
    write-DRMMAlert "CVE-2023-35628 : Could Not Determine Status : Diagnostics - $($logPath) : $($script:ScriptStopTime)"
    write-DRMMDiag $script:diag
}